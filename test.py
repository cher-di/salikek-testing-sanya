import unittest

from typing import Iterable as _Iterable, Tuple as _Tuple

from main import find_intersection_dots, find_intersection_dots_right

DELTA = 10 ** -6


class TestFindIntersectionDots(unittest.TestCase):
    def template_test(self, examples: _Iterable[_Tuple[float, float, float]]):
        for i, (a, b, c, d) in enumerate(examples):
            with self.subTest(i=i, msg=f'a: {a}, b: {b}, c: {c}, d: {d}'):
                result = find_intersection_dots(a, b, c, d)
                right_result = find_intersection_dots_right(a, b, c, d)
                self.assertEqual(len(result), len(right_result))
                for solution in zip(result, right_result):
                    first_pair, second_pair = solution
                    for value in zip(first_pair, second_pair):
                        first, second = value
                        self.assertAlmostEqual(first, second, delta=DELTA)

    def test_no_solution(self):
        examples = [(-100, -100, 0, 0), (-9, 0, 0, 0), (-8, 0, 0, 0), (-7, 0, 0, 0), (-6, 0, 0, 0), (-5, 0, 0, 0),
                    (-4, 0, 0, 0), (-3, 0, 0, 0), (-2, 0, 0, 0), (-1, 0, 0, 0)]
        self.template_test(examples)

    def test_one_solution(self):
        examples = [(-5, -1, 0, 1), (-5, -1, 1, 0), (-5, -1, 2, -1), (-5, -1, 3, -2), (-5, -1, 4, -3), (-5, -1, 5, -4),
                    (-5, 0, 0, 1), (-5, 1, 0, 1), (-5, 1, 1, 2), (-5, 1, 2, 3), (-5, 1, 3, 4), (-5, 1, 4, 5),
                    (-4, -5, -1, 1), (-4, -5, 0, 0), (-4, -5, 1, -1), (-4, -5, 2, -2), (-4, -5, 3, -3), (-4, -5, 4, -4),
                    (-4, -5, 5, -5), (-4, -3, 0, 2), (-4, -3, 1, 3), (-4, -3, 2, 4), (-4, -3, 3, 5), (-4, -1, 0, 1),
                    (-4, -1, 1, 0), (-4, -1, 2, -1), (-4, -1, 3, -2), (-4, -1, 4, -3), (-4, -1, 5, -4), (-4, 0, 0, 1)]
        self.template_test(examples)

    def test_two_solutions(self):
        examples = [(-5, -5, 0, 1), (-5, -5, 0, 2), (-5, -5, 1, 0), (-5, -5, 1, 1), (-5, -5, 1, 2), (-5, -5, 1, 3),
                    (-5, -5, 2, -1), (-5, -5, 2, 0), (-5, -5, 2, 1), (-5, -5, 2, 2), (-5, -5, 2, 3), (-5, -5, 2, 4),
                    (-5, -5, 3, -2), (-5, -5, 3, -1), (-5, -5, 3, 0), (-5, -5, 3, 1), (-5, -5, 3, 2), (-5, -5, 3, 3),
                    (-5, -5, 3, 4), (-5, -5, 3, 5), (-5, -5, 4, -3), (-5, -5, 4, -2), (-5, -5, 4, -1), (-5, -5, 4, 0),
                    (-5, -5, 4, 1), (-5, -5, 4, 2), (-5, -5, 4, 3), (-5, -5, 4, 4), (-5, -5, 4, 5), (-5, -5, 5, -4)]
        self.template_test(examples)

    def test_three_solutions(self):
        examples = [(-2, 4, -1, 1), (-2, 4, 0, 2), (-2, 4, 1, 3), (-2, 4, 2, 4), (-2, 4, 3, 5), (-1, 2, 0, 1),
                    (-1, 2, 1, 2), (-1, 2, 2, 3), (-1, 2, 3, 4), (-1, 2, 4, 5), (1, -4, 4, 1), (1, -2, 1, 0),
                    (1, -2, 2, -1), (1, -2, 3, -2), (1, -2, 4, -3), (1, -2, 5, -4), (1, 0, 0, 1), (1, 2, 1, 2),
                    (1, 4, 4, 3), (2, -4, 2, 0), (2, -4, 3, -1), (2, -4, 4, -2), (2, -4, 5, -3), (2, 0, 0, 1),
                    (2, 4, 2, 2), (3, 0, 0, 1), (4, 0, 0, 1), (5, 0, 0, 1)]
        self.template_test(examples)

    def test_four_solutions(self):
        examples = [(-0.7, 1.0, -0.1, 0.3), (-0.7, 1.0, 0.0, 0.4),
                    (-0.7, 1.0, 0.1, 0.5), (-0.7, 1.0, 0.2, 0.6), (-0.7, 1.0, 0.3, 0.7), (-0.7, 1.0, 0.4, 0.8),
                    (-0.7, 1.0, 0.5, 0.9), (-0.7, 1.0, 0.6, 1.0), (-0.6, 0.7, 0.2, 0.4),
                    (-0.6, 0.7, 0.4, 0.6), (-0.6, 0.7, 0.5, 0.7), (-0.6, 0.7, 0.6, 0.8),
                    (-0.6, 0.7, 0.7, 0.9), (-0.6, 0.7, 0.8, 1.0), (-0.6, 0.8, 0.0, 0.3), (-0.6, 0.8, 0.1, 0.4),
                    (-0.6, 0.8, 0.2, 0.5), (-0.6, 0.8, 0.3, 0.6)]
        self.template_test(examples)

    def test_five_solutions(self):
        examples = [(0.1, -0.5, 0.5, 0.1), (0.1, -0.5, 0.8, 0.4), (0.1, -0.5, 0.9, 0.5), (0.1, -0.5, 1.0, 0.6),
                    (0.1, -0.4, 0.4, 0.1),
                    (0.1, -0.4, 0.4, 1.0), (0.1, -0.4, 0.5, 0.2), (0.1, -0.4, 0.6, 0.3), (0.1, -0.4, 0.8, 0.5),
                    (0.1, -0.4, 0.9, 0.6), (0.1, -0.4, 0.9, 1.0), (0.1, -0.4, 1.0, 0.7), (0.1, -0.4, 1.0, 0.9),
                    (0.1, -0.3, 0.2, 1.0), (0.1, -0.2, 0.2, 0.1), (0.1, -0.2, 0.3, 0.2), (0.1, -0.2, 0.4, 0.3),
                    (0.1, -0.2, 0.5, 0.4), (0.1, -0.2, 0.6, 0.5), (0.1, -0.2, 0.7, 0.6), (0.1, -0.2, 0.8, 0.7),
                    (0.1, -0.2, 0.9, 0.8), (0.1, -0.2, 1.0, 0.9), (0.1, -0.1, 0.0, 1.0), (0.1, 0.0, 0.0, 1.0),
                    (0.1, 0.0, 0.3, 0.4), (0.1, 0.0, 0.5, 1.0)]
        self.template_test(examples)

    def test_six_solutions(self):
        examples = [(0.1, -0.7, 0.7, 0.2), (0.1, -0.7, 0.8, 0.3), (0.1, -0.7, 0.8, 0.4), (0.1, -0.6, 0.6, 0.2),
                    (0.1, -0.6, 0.7, 0.3), (0.1, -0.6, 0.7, 0.4), (0.1, -0.6, 0.7, 0.5), (0.1, -0.6, 0.8, 0.4),
                    (0.1, -0.6, 0.8, 0.5), (0.1, -0.5, 0.5, 0.2), (0.1, -0.5, 0.5, 0.3), (0.1, -0.5, 0.6, 0.3),
                    (0.1, -0.5, 0.6, 0.4), (0.1, -0.5, 0.6, 0.5), (0.1, -0.5, 0.6, 0.6), (0.1, -0.5, 0.6, 0.7),
                    (0.1, -0.5, 0.6, 0.8), (0.1, -0.5, 0.6, 0.9), (0.1, -0.5, 0.7, 0.4), (0.1, -0.5, 0.7, 0.5)]
        self.template_test(examples)


if __name__ == '__main__':
    unittest.main()
